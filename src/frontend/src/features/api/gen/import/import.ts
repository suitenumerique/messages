/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  ImportFileCreate202,
  ImportFileCreateParams,
  ImportFileRequest,
  ImportIMAPRequest,
  ImportImapCreate202,
  ImportImapCreateParams,
} from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 
        Import messages by uploading an EML or MBOX file.
        
        The import is processed asynchronously and returns a task ID for tracking.
        The file must be a valid EML or MBOX format. The recipient mailbox must exist
        and the user must have access to it.
        
 */
export type importFileCreateResponse202 = {
  data: ImportFileCreate202;
  status: 202;
};

export type importFileCreateResponse400 = {
  data: void;
  status: 400;
};

export type importFileCreateResponseComposite =
  | importFileCreateResponse202
  | importFileCreateResponse400;

export type importFileCreateResponse = importFileCreateResponseComposite & {
  headers: Headers;
};

export const getImportFileCreateUrl = (params: ImportFileCreateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/import/file/?${stringifiedParams}`
    : `/api/v1.0/import/file/`;
};

export const importFileCreate = async (
  importFileRequest: ImportFileRequest,
  params: ImportFileCreateParams,
  options?: RequestInit,
): Promise<importFileCreateResponse> => {
  const formData = new FormData();
  formData.append(`import_file`, importFileRequest.import_file);
  formData.append(`recipient`, importFileRequest.recipient);

  return fetchAPI<importFileCreateResponse>(getImportFileCreateUrl(params), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getImportFileCreateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importFileCreate>>,
    TError,
    { data: ImportFileRequest; params: ImportFileCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof importFileCreate>>,
  TError,
  { data: ImportFileRequest; params: ImportFileCreateParams },
  TContext
> => {
  const mutationKey = ["importFileCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof importFileCreate>>,
    { data: ImportFileRequest; params: ImportFileCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return importFileCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImportFileCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof importFileCreate>>
>;
export type ImportFileCreateMutationBody = ImportFileRequest;
export type ImportFileCreateMutationError = void;

export const useImportFileCreate = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof importFileCreate>>,
      TError,
      { data: ImportFileRequest; params: ImportFileCreateParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof importFileCreate>>,
  TError,
  { data: ImportFileRequest; params: ImportFileCreateParams },
  TContext
> => {
  const mutationOptions = getImportFileCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        Import messages from an IMAP server.
        
        This endpoint initiates an asynchronous import process from an IMAP server.
        The import is processed in the background and returns a task ID for tracking.
        
        Required parameters:
        - imap_server: Hostname of the IMAP server
        - imap_port: Port number for the IMAP server
        - username: IMAP account username
        - password: IMAP account password
        - recipient: ID of the mailbox to import messages into
        
        Optional parameters:
        - use_ssl: Whether to use SSL for the connection (default: true)
        - folder: IMAP folder to import from (default: "INBOX")
        - max_messages: Maximum number of messages to import (default: 0, meaning all messages)
        
 */
export type importImapCreateResponse202 = {
  data: ImportImapCreate202;
  status: 202;
};

export type importImapCreateResponse400 = {
  data: void;
  status: 400;
};

export type importImapCreateResponseComposite =
  | importImapCreateResponse202
  | importImapCreateResponse400;

export type importImapCreateResponse = importImapCreateResponseComposite & {
  headers: Headers;
};

export const getImportImapCreateUrl = (params: ImportImapCreateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/import/imap/?${stringifiedParams}`
    : `/api/v1.0/import/imap/`;
};

export const importImapCreate = async (
  importIMAPRequest: ImportIMAPRequest,
  params: ImportImapCreateParams,
  options?: RequestInit,
): Promise<importImapCreateResponse> => {
  const formData = new FormData();
  formData.append(`recipient`, importIMAPRequest.recipient);
  formData.append(`imap_server`, importIMAPRequest.imap_server);
  formData.append(`imap_port`, importIMAPRequest.imap_port.toString());
  formData.append(`username`, importIMAPRequest.username);
  formData.append(`password`, importIMAPRequest.password);
  if (importIMAPRequest.use_ssl !== undefined) {
    formData.append(`use_ssl`, importIMAPRequest.use_ssl.toString());
  }
  if (importIMAPRequest.folder !== undefined) {
    formData.append(`folder`, importIMAPRequest.folder);
  }
  if (importIMAPRequest.max_messages !== undefined) {
    formData.append(`max_messages`, importIMAPRequest.max_messages.toString());
  }

  return fetchAPI<importImapCreateResponse>(getImportImapCreateUrl(params), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getImportImapCreateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importImapCreate>>,
    TError,
    { data: ImportIMAPRequest; params: ImportImapCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof importImapCreate>>,
  TError,
  { data: ImportIMAPRequest; params: ImportImapCreateParams },
  TContext
> => {
  const mutationKey = ["importImapCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof importImapCreate>>,
    { data: ImportIMAPRequest; params: ImportImapCreateParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return importImapCreate(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ImportImapCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof importImapCreate>>
>;
export type ImportImapCreateMutationBody = ImportIMAPRequest;
export type ImportImapCreateMutationError = void;

export const useImportImapCreate = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof importImapCreate>>,
      TError,
      { data: ImportIMAPRequest; params: ImportImapCreateParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof importImapCreate>>,
  TError,
  { data: ImportIMAPRequest; params: ImportImapCreateParams },
  TContext
> => {
  const mutationOptions = getImportImapCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

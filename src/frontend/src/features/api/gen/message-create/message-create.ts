/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import { fetchAPI } from "../../fetchApi";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Perform the create action.
 */
export type messageCreateCreateResponse200 = {
  data: void;
  status: 200;
};

export type messageCreateCreateResponseComposite =
  messageCreateCreateResponse200;

export type messageCreateCreateResponse =
  messageCreateCreateResponseComposite & {
    headers: Headers;
  };

export const getMessageCreateCreateUrl = () => {
  return `/api/v1.0/message-create/`;
};

export const messageCreateCreate = async (
  options?: RequestInit,
): Promise<messageCreateCreateResponse> => {
  return fetchAPI<messageCreateCreateResponse>(getMessageCreateCreateUrl(), {
    ...options,
    method: "POST",
  });
};

export const getMessageCreateCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messageCreateCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof messageCreateCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["messageCreateCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messageCreateCreate>>,
    void
  > = () => {
    return messageCreateCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MessageCreateCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof messageCreateCreate>>
>;

export type MessageCreateCreateMutationError = unknown;

export const useMessageCreateCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof messageCreateCreate>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof messageCreateCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMessageCreateCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

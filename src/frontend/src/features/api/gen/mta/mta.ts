/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Check if recipient email addresses exist for the MTA.
 */
export type mtaCheckRecipientsCreateResponse200 = {
  data: void;
  status: 200;
};

export type mtaCheckRecipientsCreateResponseComposite =
  mtaCheckRecipientsCreateResponse200;

export type mtaCheckRecipientsCreateResponse =
  mtaCheckRecipientsCreateResponseComposite & {
    headers: Headers;
  };

export const getMtaCheckRecipientsCreateUrl = () => {
  return `/api/v1.0/mta/check-recipients/`;
};

export const mtaCheckRecipientsCreate = async (
  options?: RequestInit,
): Promise<mtaCheckRecipientsCreateResponse> => {
  return fetchAPI<mtaCheckRecipientsCreateResponse>(
    getMtaCheckRecipientsCreateUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getMtaCheckRecipientsCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof mtaCheckRecipientsCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof mtaCheckRecipientsCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["mtaCheckRecipientsCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof mtaCheckRecipientsCreate>>,
    void
  > = () => {
    return mtaCheckRecipientsCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MtaCheckRecipientsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof mtaCheckRecipientsCreate>>
>;

export type MtaCheckRecipientsCreateMutationError = unknown;

export const useMtaCheckRecipientsCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof mtaCheckRecipientsCreate>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof mtaCheckRecipientsCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMtaCheckRecipientsCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Handle incoming raw email (message/rfc822) from MTA.
 */
export type mtaInboundEmailCreateResponse200 = {
  data: void;
  status: 200;
};

export type mtaInboundEmailCreateResponseComposite =
  mtaInboundEmailCreateResponse200;

export type mtaInboundEmailCreateResponse =
  mtaInboundEmailCreateResponseComposite & {
    headers: Headers;
  };

export const getMtaInboundEmailCreateUrl = () => {
  return `/api/v1.0/mta/inbound-email/`;
};

export const mtaInboundEmailCreate = async (
  options?: RequestInit,
): Promise<mtaInboundEmailCreateResponse> => {
  return fetchAPI<mtaInboundEmailCreateResponse>(
    getMtaInboundEmailCreateUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getMtaInboundEmailCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof mtaInboundEmailCreate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof mtaInboundEmailCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["mtaInboundEmailCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof mtaInboundEmailCreate>>,
    void
  > = () => {
    return mtaInboundEmailCreate(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MtaInboundEmailCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof mtaInboundEmailCreate>>
>;

export type MtaInboundEmailCreateMutationError = unknown;

export const useMtaInboundEmailCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof mtaInboundEmailCreate>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof mtaInboundEmailCreate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getMtaInboundEmailCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

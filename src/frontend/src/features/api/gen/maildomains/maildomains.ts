/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  MailboxAdmin,
  MaildomainsListParams,
  MaildomainsMailboxesListParams,
  PaginatedMailDomainAdminList,
  PaginatedMailboxAdminList,
} from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ViewSet for listing MailDomains the user administers.
Provides a top-level entry for mail domain administration.
Endpoint: /maildomains/
 */
export type maildomainsListResponse200 = {
  data: PaginatedMailDomainAdminList;
  status: 200;
};

export type maildomainsListResponseComposite = maildomainsListResponse200;

export type maildomainsListResponse = maildomainsListResponseComposite & {
  headers: Headers;
};

export const getMaildomainsListUrl = (params?: MaildomainsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/maildomains/?${stringifiedParams}`
    : `/api/v1.0/maildomains/`;
};

export const maildomainsList = async (
  params?: MaildomainsListParams,
  options?: RequestInit,
): Promise<maildomainsListResponse> => {
  return fetchAPI<maildomainsListResponse>(getMaildomainsListUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getMaildomainsListQueryKey = (params?: MaildomainsListParams) => {
  return [`/api/v1.0/maildomains/`, ...(params ? [params] : [])] as const;
};

export const getMaildomainsListQueryOptions = <
  TData = Awaited<ReturnType<typeof maildomainsList>>,
  TError = unknown,
>(
  params?: MaildomainsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMaildomainsListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof maildomainsList>>> = ({
    signal,
  }) => maildomainsList(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof maildomainsList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MaildomainsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsList>>
>;
export type MaildomainsListQueryError = unknown;

export function useMaildomainsList<
  TData = Awaited<ReturnType<typeof maildomainsList>>,
  TError = unknown,
>(
  params: undefined | MaildomainsListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsList>>,
          TError,
          Awaited<ReturnType<typeof maildomainsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsList<
  TData = Awaited<ReturnType<typeof maildomainsList>>,
  TError = unknown,
>(
  params?: MaildomainsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsList>>,
          TError,
          Awaited<ReturnType<typeof maildomainsList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsList<
  TData = Awaited<ReturnType<typeof maildomainsList>>,
  TError = unknown,
>(
  params?: MaildomainsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMaildomainsList<
  TData = Awaited<ReturnType<typeof maildomainsList>>,
  TError = unknown,
>(
  params?: MaildomainsListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMaildomainsListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for managing Mailboxes within a specific MailDomain.
Nested under /maildomains/{maildomain_pk}/mailboxes/
Permissions are checked by IsMailDomainAdmin for the maildomain_pk.

This viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).
That other one is for listing the mailboxes a user has access to in regular app use.
This one is for managing mailboxes within a specific maildomain in the admin interface.
 */
export type maildomainsMailboxesListResponse200 = {
  data: PaginatedMailboxAdminList;
  status: 200;
};

export type maildomainsMailboxesListResponseComposite =
  maildomainsMailboxesListResponse200;

export type maildomainsMailboxesListResponse =
  maildomainsMailboxesListResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsMailboxesListUrl = (
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/maildomains/${maildomainPk}/mailboxes/?${stringifiedParams}`
    : `/api/v1.0/maildomains/${maildomainPk}/mailboxes/`;
};

export const maildomainsMailboxesList = async (
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
  options?: RequestInit,
): Promise<maildomainsMailboxesListResponse> => {
  return fetchAPI<maildomainsMailboxesListResponse>(
    getMaildomainsMailboxesListUrl(maildomainPk, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMaildomainsMailboxesListQueryKey = (
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
) => {
  return [
    `/api/v1.0/maildomains/${maildomainPk}/mailboxes/`,
    ...(params ? [params] : []),
  ] as const;
};

export const getMaildomainsMailboxesListQueryOptions = <
  TData = Awaited<ReturnType<typeof maildomainsMailboxesList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMaildomainsMailboxesListQueryKey(maildomainPk, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof maildomainsMailboxesList>>
  > = ({ signal }) =>
    maildomainsMailboxesList(maildomainPk, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!maildomainPk,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof maildomainsMailboxesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MaildomainsMailboxesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsMailboxesList>>
>;
export type MaildomainsMailboxesListQueryError = unknown;

export function useMaildomainsMailboxesList<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params: undefined | MaildomainsMailboxesListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsMailboxesList>>,
          TError,
          Awaited<ReturnType<typeof maildomainsMailboxesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsMailboxesList<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsMailboxesList>>,
          TError,
          Awaited<ReturnType<typeof maildomainsMailboxesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsMailboxesList<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMaildomainsMailboxesList<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesList>>,
  TError = unknown,
>(
  maildomainPk: string,
  params?: MaildomainsMailboxesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMaildomainsMailboxesListQueryOptions(
    maildomainPk,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for managing Mailboxes within a specific MailDomain.
Nested under /maildomains/{maildomain_pk}/mailboxes/
Permissions are checked by IsMailDomainAdmin for the maildomain_pk.

This viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).
That other one is for listing the mailboxes a user has access to in regular app use.
This one is for managing mailboxes within a specific maildomain in the admin interface.
 */
export type maildomainsMailboxesCreateResponse201 = {
  data: MailboxAdmin;
  status: 201;
};

export type maildomainsMailboxesCreateResponseComposite =
  maildomainsMailboxesCreateResponse201;

export type maildomainsMailboxesCreateResponse =
  maildomainsMailboxesCreateResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsMailboxesCreateUrl = (maildomainPk: string) => {
  return `/api/v1.0/maildomains/${maildomainPk}/mailboxes/`;
};

export const maildomainsMailboxesCreate = async (
  maildomainPk: string,
  options?: RequestInit,
): Promise<maildomainsMailboxesCreateResponse> => {
  return fetchAPI<maildomainsMailboxesCreateResponse>(
    getMaildomainsMailboxesCreateUrl(maildomainPk),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getMaildomainsMailboxesCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof maildomainsMailboxesCreate>>,
    TError,
    { maildomainPk: string },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof maildomainsMailboxesCreate>>,
  TError,
  { maildomainPk: string },
  TContext
> => {
  const mutationKey = ["maildomainsMailboxesCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof maildomainsMailboxesCreate>>,
    { maildomainPk: string }
  > = (props) => {
    const { maildomainPk } = props ?? {};

    return maildomainsMailboxesCreate(maildomainPk, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MaildomainsMailboxesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsMailboxesCreate>>
>;

export type MaildomainsMailboxesCreateMutationError = unknown;

export const useMaildomainsMailboxesCreate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof maildomainsMailboxesCreate>>,
      TError,
      { maildomainPk: string },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof maildomainsMailboxesCreate>>,
  TError,
  { maildomainPk: string },
  TContext
> => {
  const mutationOptions = getMaildomainsMailboxesCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ViewSet for managing Mailboxes within a specific MailDomain.
Nested under /maildomains/{maildomain_pk}/mailboxes/
Permissions are checked by IsMailDomainAdmin for the maildomain_pk.

This viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).
That other one is for listing the mailboxes a user has access to in regular app use.
This one is for managing mailboxes within a specific maildomain in the admin interface.
 */
export type maildomainsMailboxesRetrieveResponse200 = {
  data: MailboxAdmin;
  status: 200;
};

export type maildomainsMailboxesRetrieveResponseComposite =
  maildomainsMailboxesRetrieveResponse200;

export type maildomainsMailboxesRetrieveResponse =
  maildomainsMailboxesRetrieveResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsMailboxesRetrieveUrl = (
  maildomainPk: string,
  id: string,
) => {
  return `/api/v1.0/maildomains/${maildomainPk}/mailboxes/${id}/`;
};

export const maildomainsMailboxesRetrieve = async (
  maildomainPk: string,
  id: string,
  options?: RequestInit,
): Promise<maildomainsMailboxesRetrieveResponse> => {
  return fetchAPI<maildomainsMailboxesRetrieveResponse>(
    getMaildomainsMailboxesRetrieveUrl(maildomainPk, id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getMaildomainsMailboxesRetrieveQueryKey = (
  maildomainPk: string,
  id: string,
) => {
  return [`/api/v1.0/maildomains/${maildomainPk}/mailboxes/${id}/`] as const;
};

export const getMaildomainsMailboxesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
  TError = unknown,
>(
  maildomainPk: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getMaildomainsMailboxesRetrieveQueryKey(maildomainPk, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>
  > = ({ signal }) =>
    maildomainsMailboxesRetrieve(maildomainPk, id, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(maildomainPk && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MaildomainsMailboxesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>
>;
export type MaildomainsMailboxesRetrieveQueryError = unknown;

export function useMaildomainsMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
  TError = unknown,
>(
  maildomainPk: string,
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
  TError = unknown,
>(
  maildomainPk: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMaildomainsMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
  TError = unknown,
>(
  maildomainPk: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMaildomainsMailboxesRetrieve<
  TData = Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
  TError = unknown,
>(
  maildomainPk: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof maildomainsMailboxesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMaildomainsMailboxesRetrieveQueryOptions(
    maildomainPk,
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for managing Mailboxes within a specific MailDomain.
Nested under /maildomains/{maildomain_pk}/mailboxes/
Permissions are checked by IsMailDomainAdmin for the maildomain_pk.

This viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).
That other one is for listing the mailboxes a user has access to in regular app use.
This one is for managing mailboxes within a specific maildomain in the admin interface.
 */
export type maildomainsMailboxesUpdateResponse200 = {
  data: MailboxAdmin;
  status: 200;
};

export type maildomainsMailboxesUpdateResponseComposite =
  maildomainsMailboxesUpdateResponse200;

export type maildomainsMailboxesUpdateResponse =
  maildomainsMailboxesUpdateResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsMailboxesUpdateUrl = (
  maildomainPk: string,
  id: string,
) => {
  return `/api/v1.0/maildomains/${maildomainPk}/mailboxes/${id}/`;
};

export const maildomainsMailboxesUpdate = async (
  maildomainPk: string,
  id: string,
  options?: RequestInit,
): Promise<maildomainsMailboxesUpdateResponse> => {
  return fetchAPI<maildomainsMailboxesUpdateResponse>(
    getMaildomainsMailboxesUpdateUrl(maildomainPk, id),
    {
      ...options,
      method: "PUT",
    },
  );
};

export const getMaildomainsMailboxesUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof maildomainsMailboxesUpdate>>,
    TError,
    { maildomainPk: string; id: string },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof maildomainsMailboxesUpdate>>,
  TError,
  { maildomainPk: string; id: string },
  TContext
> => {
  const mutationKey = ["maildomainsMailboxesUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof maildomainsMailboxesUpdate>>,
    { maildomainPk: string; id: string }
  > = (props) => {
    const { maildomainPk, id } = props ?? {};

    return maildomainsMailboxesUpdate(maildomainPk, id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MaildomainsMailboxesUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsMailboxesUpdate>>
>;

export type MaildomainsMailboxesUpdateMutationError = unknown;

export const useMaildomainsMailboxesUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof maildomainsMailboxesUpdate>>,
      TError,
      { maildomainPk: string; id: string },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof maildomainsMailboxesUpdate>>,
  TError,
  { maildomainPk: string; id: string },
  TContext
> => {
  const mutationOptions = getMaildomainsMailboxesUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ViewSet for managing Mailboxes within a specific MailDomain.
Nested under /maildomains/{maildomain_pk}/mailboxes/
Permissions are checked by IsMailDomainAdmin for the maildomain_pk.

This viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).
That other one is for listing the mailboxes a user has access to in regular app use.
This one is for managing mailboxes within a specific maildomain in the admin interface.
 */
export type maildomainsMailboxesPartialUpdateResponse200 = {
  data: MailboxAdmin;
  status: 200;
};

export type maildomainsMailboxesPartialUpdateResponseComposite =
  maildomainsMailboxesPartialUpdateResponse200;

export type maildomainsMailboxesPartialUpdateResponse =
  maildomainsMailboxesPartialUpdateResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsMailboxesPartialUpdateUrl = (
  maildomainPk: string,
  id: string,
) => {
  return `/api/v1.0/maildomains/${maildomainPk}/mailboxes/${id}/`;
};

export const maildomainsMailboxesPartialUpdate = async (
  maildomainPk: string,
  id: string,
  options?: RequestInit,
): Promise<maildomainsMailboxesPartialUpdateResponse> => {
  return fetchAPI<maildomainsMailboxesPartialUpdateResponse>(
    getMaildomainsMailboxesPartialUpdateUrl(maildomainPk, id),
    {
      ...options,
      method: "PATCH",
    },
  );
};

export const getMaildomainsMailboxesPartialUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof maildomainsMailboxesPartialUpdate>>,
    TError,
    { maildomainPk: string; id: string },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof maildomainsMailboxesPartialUpdate>>,
  TError,
  { maildomainPk: string; id: string },
  TContext
> => {
  const mutationKey = ["maildomainsMailboxesPartialUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof maildomainsMailboxesPartialUpdate>>,
    { maildomainPk: string; id: string }
  > = (props) => {
    const { maildomainPk, id } = props ?? {};

    return maildomainsMailboxesPartialUpdate(maildomainPk, id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MaildomainsMailboxesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsMailboxesPartialUpdate>>
>;

export type MaildomainsMailboxesPartialUpdateMutationError = unknown;

export const useMaildomainsMailboxesPartialUpdate = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof maildomainsMailboxesPartialUpdate>>,
      TError,
      { maildomainPk: string; id: string },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof maildomainsMailboxesPartialUpdate>>,
  TError,
  { maildomainPk: string; id: string },
  TContext
> => {
  const mutationOptions =
    getMaildomainsMailboxesPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ViewSet for managing Mailboxes within a specific MailDomain.
Nested under /maildomains/{maildomain_pk}/mailboxes/
Permissions are checked by IsMailDomainAdmin for the maildomain_pk.

This viewset serves a different purpose than the one in mailbox.py (/api/v1.0/mailboxes/).
That other one is for listing the mailboxes a user has access to in regular app use.
This one is for managing mailboxes within a specific maildomain in the admin interface.
 */
export type maildomainsMailboxesDestroyResponse204 = {
  data: void;
  status: 204;
};

export type maildomainsMailboxesDestroyResponseComposite =
  maildomainsMailboxesDestroyResponse204;

export type maildomainsMailboxesDestroyResponse =
  maildomainsMailboxesDestroyResponseComposite & {
    headers: Headers;
  };

export const getMaildomainsMailboxesDestroyUrl = (
  maildomainPk: string,
  id: string,
) => {
  return `/api/v1.0/maildomains/${maildomainPk}/mailboxes/${id}/`;
};

export const maildomainsMailboxesDestroy = async (
  maildomainPk: string,
  id: string,
  options?: RequestInit,
): Promise<maildomainsMailboxesDestroyResponse> => {
  return fetchAPI<maildomainsMailboxesDestroyResponse>(
    getMaildomainsMailboxesDestroyUrl(maildomainPk, id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getMaildomainsMailboxesDestroyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof maildomainsMailboxesDestroy>>,
    TError,
    { maildomainPk: string; id: string },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof maildomainsMailboxesDestroy>>,
  TError,
  { maildomainPk: string; id: string },
  TContext
> => {
  const mutationKey = ["maildomainsMailboxesDestroy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof maildomainsMailboxesDestroy>>,
    { maildomainPk: string; id: string }
  > = (props) => {
    const { maildomainPk, id } = props ?? {};

    return maildomainsMailboxesDestroy(maildomainPk, id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MaildomainsMailboxesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof maildomainsMailboxesDestroy>>
>;

export type MaildomainsMailboxesDestroyMutationError = unknown;

export const useMaildomainsMailboxesDestroy = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof maildomainsMailboxesDestroy>>,
      TError,
      { maildomainPk: string; id: string },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof maildomainsMailboxesDestroy>>,
  TError,
  { maildomainPk: string; id: string },
  TContext
> => {
  const mutationOptions =
    getMaildomainsMailboxesDestroyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

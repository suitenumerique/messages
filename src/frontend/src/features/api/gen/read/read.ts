/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { ChangeReadStatusRequestRequest } from ".././models";

import { fetchAPI } from "../../fetchApi";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * The type of the None singleton.
 */
export type readCreateResponse200 = {
  data: void;
  status: 200;
};

export type readCreateResponseComposite = readCreateResponse200;

export type readCreateResponse = readCreateResponseComposite & {
  headers: Headers;
};

export const getReadCreateUrl = () => {
  return `/api/v1.0/read/`;
};

export const readCreate = async (
  changeReadStatusRequestRequest: ChangeReadStatusRequestRequest,
  options?: RequestInit,
): Promise<readCreateResponse> => {
  return fetchAPI<readCreateResponse>(getReadCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(changeReadStatusRequestRequest),
  });
};

export const getReadCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof readCreate>>,
    TError,
    { data: ChangeReadStatusRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof readCreate>>,
  TError,
  { data: ChangeReadStatusRequestRequest },
  TContext
> => {
  const mutationKey = ["readCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof readCreate>>,
    { data: ChangeReadStatusRequestRequest }
  > = (props) => {
    const { data } = props ?? {};

    return readCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReadCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof readCreate>>
>;
export type ReadCreateMutationBody = ChangeReadStatusRequestRequest;
export type ReadCreateMutationError = unknown;

export const useReadCreate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof readCreate>>,
      TError,
      { data: ChangeReadStatusRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof readCreate>>,
  TError,
  { data: ChangeReadStatusRequestRequest },
  TContext
> => {
  const mutationOptions = getReadCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

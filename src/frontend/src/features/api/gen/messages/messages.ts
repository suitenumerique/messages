/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  DraftCreate2400,
  DraftCreate2403,
  DraftCreate2404,
  DraftCreate400,
  DraftCreate403,
  DraftCreate404,
  DraftMessageRequestRequest,
  DraftUpdate2400,
  DraftUpdate2403,
  DraftUpdate2404,
  DraftUpdate400,
  DraftUpdate403,
  DraftUpdate404,
  Message,
  MessagesListParams,
  PaginatedMessageList,
  SendCreate400,
  SendCreate403,
  SendCreate503,
  SendMessageRequestRequest,
} from ".././models";

import { fetchAPI } from "../../fetch-api";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 
    Create or update a draft message.
    
    This endpoint allows you to:
    - Create a new draft message in a new thread
    - Create a draft reply to an existing message in an existing thread
    - Update an existing draft message
    
    For creating a new draft:
    - Do not include messageId
    - Include parentId if replying to an existing message
    
    For updating an existing draft:
    - Include messageId of the draft to update
    - Only the fields that are provided will be updated
    
    At least one of draftBody must be provided.
    
 */
export type draftCreateResponse200 = {
  data: Message;
  status: 200;
};

export type draftCreateResponse400 = {
  data: DraftCreate400;
  status: 400;
};

export type draftCreateResponse403 = {
  data: DraftCreate403;
  status: 403;
};

export type draftCreateResponse404 = {
  data: DraftCreate404;
  status: 404;
};

export type draftCreateResponseComposite =
  | draftCreateResponse200
  | draftCreateResponse400
  | draftCreateResponse403
  | draftCreateResponse404;

export type draftCreateResponse = draftCreateResponseComposite & {
  headers: Headers;
};

export const getDraftCreateUrl = () => {
  return `/api/v1.0/draft/`;
};

export const draftCreate = async (
  draftMessageRequestRequest: DraftMessageRequestRequest,
  options?: RequestInit,
): Promise<draftCreateResponse> => {
  return fetchAPI<draftCreateResponse>(getDraftCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(draftMessageRequestRequest),
  });
};

export const getDraftCreateMutationOptions = <
  TError = DraftCreate400 | DraftCreate403 | DraftCreate404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof draftCreate>>,
    TError,
    { data: DraftMessageRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof draftCreate>>,
  TError,
  { data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationKey = ["draftCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof draftCreate>>,
    { data: DraftMessageRequestRequest }
  > = (props) => {
    const { data } = props ?? {};

    return draftCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DraftCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof draftCreate>>
>;
export type DraftCreateMutationBody = DraftMessageRequestRequest;
export type DraftCreateMutationError =
  | DraftCreate400
  | DraftCreate403
  | DraftCreate404;

export const useDraftCreate = <
  TError = DraftCreate400 | DraftCreate403 | DraftCreate404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof draftCreate>>,
      TError,
      { data: DraftMessageRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof draftCreate>>,
  TError,
  { data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationOptions = getDraftCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
    Create or update a draft message.
    
    This endpoint allows you to:
    - Create a new draft message in a new thread
    - Create a draft reply to an existing message in an existing thread
    - Update an existing draft message
    
    For creating a new draft:
    - Do not include messageId
    - Include parentId if replying to an existing message
    
    For updating an existing draft:
    - Include messageId of the draft to update
    - Only the fields that are provided will be updated
    
    At least one of draftBody must be provided.
    
 */
export type draftUpdateResponse200 = {
  data: Message;
  status: 200;
};

export type draftUpdateResponse400 = {
  data: DraftUpdate400;
  status: 400;
};

export type draftUpdateResponse403 = {
  data: DraftUpdate403;
  status: 403;
};

export type draftUpdateResponse404 = {
  data: DraftUpdate404;
  status: 404;
};

export type draftUpdateResponseComposite =
  | draftUpdateResponse200
  | draftUpdateResponse400
  | draftUpdateResponse403
  | draftUpdateResponse404;

export type draftUpdateResponse = draftUpdateResponseComposite & {
  headers: Headers;
};

export const getDraftUpdateUrl = () => {
  return `/api/v1.0/draft/`;
};

export const draftUpdate = async (
  draftMessageRequestRequest: DraftMessageRequestRequest,
  options?: RequestInit,
): Promise<draftUpdateResponse> => {
  return fetchAPI<draftUpdateResponse>(getDraftUpdateUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(draftMessageRequestRequest),
  });
};

export const getDraftUpdateMutationOptions = <
  TError = DraftUpdate400 | DraftUpdate403 | DraftUpdate404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof draftUpdate>>,
    TError,
    { data: DraftMessageRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof draftUpdate>>,
  TError,
  { data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationKey = ["draftUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof draftUpdate>>,
    { data: DraftMessageRequestRequest }
  > = (props) => {
    const { data } = props ?? {};

    return draftUpdate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DraftUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof draftUpdate>>
>;
export type DraftUpdateMutationBody = DraftMessageRequestRequest;
export type DraftUpdateMutationError =
  | DraftUpdate400
  | DraftUpdate403
  | DraftUpdate404;

export const useDraftUpdate = <
  TError = DraftUpdate400 | DraftUpdate403 | DraftUpdate404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof draftUpdate>>,
      TError,
      { data: DraftMessageRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof draftUpdate>>,
  TError,
  { data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationOptions = getDraftUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
    Create or update a draft message.
    
    This endpoint allows you to:
    - Create a new draft message in a new thread
    - Create a draft reply to an existing message in an existing thread
    - Update an existing draft message
    
    For creating a new draft:
    - Do not include messageId
    - Include parentId if replying to an existing message
    
    For updating an existing draft:
    - Include messageId of the draft to update
    - Only the fields that are provided will be updated
    
    At least one of draftBody must be provided.
    
 */
export type draftCreate2Response200 = {
  data: Message;
  status: 200;
};

export type draftCreate2Response400 = {
  data: DraftCreate2400;
  status: 400;
};

export type draftCreate2Response403 = {
  data: DraftCreate2403;
  status: 403;
};

export type draftCreate2Response404 = {
  data: DraftCreate2404;
  status: 404;
};

export type draftCreate2ResponseComposite =
  | draftCreate2Response200
  | draftCreate2Response400
  | draftCreate2Response403
  | draftCreate2Response404;

export type draftCreate2Response = draftCreate2ResponseComposite & {
  headers: Headers;
};

export const getDraftCreate2Url = (messageId: string) => {
  return `/api/v1.0/draft/${messageId}/`;
};

export const draftCreate2 = async (
  messageId: string,
  draftMessageRequestRequest: DraftMessageRequestRequest,
  options?: RequestInit,
): Promise<draftCreate2Response> => {
  return fetchAPI<draftCreate2Response>(getDraftCreate2Url(messageId), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(draftMessageRequestRequest),
  });
};

export const getDraftCreate2MutationOptions = <
  TError = DraftCreate2400 | DraftCreate2403 | DraftCreate2404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof draftCreate2>>,
    TError,
    { messageId: string; data: DraftMessageRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof draftCreate2>>,
  TError,
  { messageId: string; data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationKey = ["draftCreate2"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof draftCreate2>>,
    { messageId: string; data: DraftMessageRequestRequest }
  > = (props) => {
    const { messageId, data } = props ?? {};

    return draftCreate2(messageId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DraftCreate2MutationResult = NonNullable<
  Awaited<ReturnType<typeof draftCreate2>>
>;
export type DraftCreate2MutationBody = DraftMessageRequestRequest;
export type DraftCreate2MutationError =
  | DraftCreate2400
  | DraftCreate2403
  | DraftCreate2404;

export const useDraftCreate2 = <
  TError = DraftCreate2400 | DraftCreate2403 | DraftCreate2404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof draftCreate2>>,
      TError,
      { messageId: string; data: DraftMessageRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof draftCreate2>>,
  TError,
  { messageId: string; data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationOptions = getDraftCreate2MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
    Create or update a draft message.
    
    This endpoint allows you to:
    - Create a new draft message in a new thread
    - Create a draft reply to an existing message in an existing thread
    - Update an existing draft message
    
    For creating a new draft:
    - Do not include messageId
    - Include parentId if replying to an existing message
    
    For updating an existing draft:
    - Include messageId of the draft to update
    - Only the fields that are provided will be updated
    
    At least one of draftBody must be provided.
    
 */
export type draftUpdate2Response200 = {
  data: Message;
  status: 200;
};

export type draftUpdate2Response400 = {
  data: DraftUpdate2400;
  status: 400;
};

export type draftUpdate2Response403 = {
  data: DraftUpdate2403;
  status: 403;
};

export type draftUpdate2Response404 = {
  data: DraftUpdate2404;
  status: 404;
};

export type draftUpdate2ResponseComposite =
  | draftUpdate2Response200
  | draftUpdate2Response400
  | draftUpdate2Response403
  | draftUpdate2Response404;

export type draftUpdate2Response = draftUpdate2ResponseComposite & {
  headers: Headers;
};

export const getDraftUpdate2Url = (messageId: string) => {
  return `/api/v1.0/draft/${messageId}/`;
};

export const draftUpdate2 = async (
  messageId: string,
  draftMessageRequestRequest: DraftMessageRequestRequest,
  options?: RequestInit,
): Promise<draftUpdate2Response> => {
  return fetchAPI<draftUpdate2Response>(getDraftUpdate2Url(messageId), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(draftMessageRequestRequest),
  });
};

export const getDraftUpdate2MutationOptions = <
  TError = DraftUpdate2400 | DraftUpdate2403 | DraftUpdate2404,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof draftUpdate2>>,
    TError,
    { messageId: string; data: DraftMessageRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof draftUpdate2>>,
  TError,
  { messageId: string; data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationKey = ["draftUpdate2"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof draftUpdate2>>,
    { messageId: string; data: DraftMessageRequestRequest }
  > = (props) => {
    const { messageId, data } = props ?? {};

    return draftUpdate2(messageId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DraftUpdate2MutationResult = NonNullable<
  Awaited<ReturnType<typeof draftUpdate2>>
>;
export type DraftUpdate2MutationBody = DraftMessageRequestRequest;
export type DraftUpdate2MutationError =
  | DraftUpdate2400
  | DraftUpdate2403
  | DraftUpdate2404;

export const useDraftUpdate2 = <
  TError = DraftUpdate2400 | DraftUpdate2403 | DraftUpdate2404,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof draftUpdate2>>,
      TError,
      { messageId: string; data: DraftMessageRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof draftUpdate2>>,
  TError,
  { messageId: string; data: DraftMessageRequestRequest },
  TContext
> => {
  const mutationOptions = getDraftUpdate2MutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ViewSet for Message model.
 */
export type messagesListResponse200 = {
  data: PaginatedMessageList;
  status: 200;
};

export type messagesListResponseComposite = messagesListResponse200;

export type messagesListResponse = messagesListResponseComposite & {
  headers: Headers;
};

export const getMessagesListUrl = (params?: MessagesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/messages/?${stringifiedParams}`
    : `/api/v1.0/messages/`;
};

export const messagesList = async (
  params?: MessagesListParams,
  options?: RequestInit,
): Promise<messagesListResponse> => {
  return fetchAPI<messagesListResponse>(getMessagesListUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getMessagesListQueryKey = (params?: MessagesListParams) => {
  return [`/api/v1.0/messages/`, ...(params ? [params] : [])] as const;
};

export const getMessagesListQueryOptions = <
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMessagesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof messagesList>>> = ({
    signal,
  }) => messagesList(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof messagesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MessagesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof messagesList>>
>;
export type MessagesListQueryError = unknown;

export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params: undefined | MessagesListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesList>>,
          TError,
          Awaited<ReturnType<typeof messagesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesList>>,
          TError,
          Awaited<ReturnType<typeof messagesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMessagesListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for Message model.
 */
export type messagesRetrieveResponse200 = {
  data: Message;
  status: 200;
};

export type messagesRetrieveResponseComposite = messagesRetrieveResponse200;

export type messagesRetrieveResponse = messagesRetrieveResponseComposite & {
  headers: Headers;
};

export const getMessagesRetrieveUrl = (id: string) => {
  return `/api/v1.0/messages/${id}/`;
};

export const messagesRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<messagesRetrieveResponse> => {
  return fetchAPI<messagesRetrieveResponse>(getMessagesRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getMessagesRetrieveQueryKey = (id: string) => {
  return [`/api/v1.0/messages/${id}/`] as const;
};

export const getMessagesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMessagesRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof messagesRetrieve>>
  > = ({ signal }) => messagesRetrieve(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof messagesRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MessagesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof messagesRetrieve>>
>;
export type MessagesRetrieveQueryError = unknown;

export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof messagesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof messagesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMessagesRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a message.
 */
export type messagesDestroyResponse204 = {
  data: void;
  status: 204;
};

export type messagesDestroyResponseComposite = messagesDestroyResponse204;

export type messagesDestroyResponse = messagesDestroyResponseComposite & {
  headers: Headers;
};

export const getMessagesDestroyUrl = (id: string) => {
  return `/api/v1.0/messages/${id}/`;
};

export const messagesDestroy = async (
  id: string,
  options?: RequestInit,
): Promise<messagesDestroyResponse> => {
  return fetchAPI<messagesDestroyResponse>(getMessagesDestroyUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getMessagesDestroyMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof messagesDestroy>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof messagesDestroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["messagesDestroy"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof messagesDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return messagesDestroy(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type MessagesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof messagesDestroy>>
>;

export type MessagesDestroyMutationError = unknown;

export const useMessagesDestroy = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof messagesDestroy>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof messagesDestroy>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getMessagesDestroyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
    Send a previously created draft message.

    This endpoint finalizes and sends a message previously saved as a draft.
    The message content (subject, body, recipients) should be set when creating/updating the draft.
    
 */
export type sendCreateResponse200 = {
  data: Message;
  status: 200;
};

export type sendCreateResponse400 = {
  data: SendCreate400;
  status: 400;
};

export type sendCreateResponse403 = {
  data: SendCreate403;
  status: 403;
};

export type sendCreateResponse503 = {
  data: SendCreate503;
  status: 503;
};

export type sendCreateResponseComposite =
  | sendCreateResponse200
  | sendCreateResponse400
  | sendCreateResponse403
  | sendCreateResponse503;

export type sendCreateResponse = sendCreateResponseComposite & {
  headers: Headers;
};

export const getSendCreateUrl = () => {
  return `/api/v1.0/send/`;
};

export const sendCreate = async (
  sendMessageRequestRequest: SendMessageRequestRequest,
  options?: RequestInit,
): Promise<sendCreateResponse> => {
  return fetchAPI<sendCreateResponse>(getSendCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(sendMessageRequestRequest),
  });
};

export const getSendCreateMutationOptions = <
  TError = SendCreate400 | SendCreate403 | SendCreate503,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendCreate>>,
    TError,
    { data: SendMessageRequestRequest },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendCreate>>,
  TError,
  { data: SendMessageRequestRequest },
  TContext
> => {
  const mutationKey = ["sendCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendCreate>>,
    { data: SendMessageRequestRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendCreate>>
>;
export type SendCreateMutationBody = SendMessageRequestRequest;
export type SendCreateMutationError =
  | SendCreate400
  | SendCreate403
  | SendCreate503;

export const useSendCreate = <
  TError = SendCreate400 | SendCreate403 | SendCreate503,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof sendCreate>>,
      TError,
      { data: SendMessageRequestRequest },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof sendCreate>>,
  TError,
  { data: SendMessageRequestRequest },
  TContext
> => {
  const mutationOptions = getSendCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

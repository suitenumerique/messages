/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  Message,
  MessagesListParams,
  PaginatedMessageList,
} from ".././models";

import { fetchAPI } from "../../fetchApi";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ViewSet for Message model.
 */
export type messagesListResponse200 = {
  data: PaginatedMessageList;
  status: 200;
};

export type messagesListResponseComposite = messagesListResponse200;

export type messagesListResponse = messagesListResponseComposite & {
  headers: Headers;
};

export const getMessagesListUrl = (params?: MessagesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/messages/?${stringifiedParams}`
    : `/api/v1.0/messages/`;
};

export const messagesList = async (
  params?: MessagesListParams,
  options?: RequestInit,
): Promise<messagesListResponse> => {
  return fetchAPI<messagesListResponse>(getMessagesListUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getMessagesListQueryKey = (params?: MessagesListParams) => {
  return [`/api/v1.0/messages/`, ...(params ? [params] : [])] as const;
};

export const getMessagesListQueryOptions = <
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMessagesListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof messagesList>>> = ({
    signal,
  }) => messagesList(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof messagesList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MessagesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof messagesList>>
>;
export type MessagesListQueryError = unknown;

export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params: undefined | MessagesListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesList>>,
          TError,
          Awaited<ReturnType<typeof messagesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesList>>,
          TError,
          Awaited<ReturnType<typeof messagesList>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMessagesList<
  TData = Awaited<ReturnType<typeof messagesList>>,
  TError = unknown,
>(
  params?: MessagesListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof messagesList>>, TError, TData>
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMessagesListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ViewSet for Message model.
 */
export type messagesRetrieveResponse200 = {
  data: Message;
  status: 200;
};

export type messagesRetrieveResponseComposite = messagesRetrieveResponse200;

export type messagesRetrieveResponse = messagesRetrieveResponseComposite & {
  headers: Headers;
};

export const getMessagesRetrieveUrl = (id: string) => {
  return `/api/v1.0/messages/${id}/`;
};

export const messagesRetrieve = async (
  id: string,
  options?: RequestInit,
): Promise<messagesRetrieveResponse> => {
  return fetchAPI<messagesRetrieveResponse>(getMessagesRetrieveUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getMessagesRetrieveQueryKey = (id: string) => {
  return [`/api/v1.0/messages/${id}/`] as const;
};

export const getMessagesRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getMessagesRetrieveQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof messagesRetrieve>>
  > = ({ signal }) => messagesRetrieve(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof messagesRetrieve>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type MessagesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof messagesRetrieve>>
>;
export type MessagesRetrieveQueryError = unknown;

export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof messagesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof messagesRetrieve>>,
          TError,
          Awaited<ReturnType<typeof messagesRetrieve>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useMessagesRetrieve<
  TData = Awaited<ReturnType<typeof messagesRetrieve>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof messagesRetrieve>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getMessagesRetrieveQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

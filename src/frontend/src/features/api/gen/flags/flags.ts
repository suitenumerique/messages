/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * messages API
 * This is the messages API schema.
 * OpenAPI spec version: 1.0.0 (v1.0)
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  FlagCreate200,
  FlagCreate400,
  FlagCreate403,
  FlagCreateParams,
} from ".././models";

import { fetchAPI } from "../../fetchApi";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Change a specific flag (unread, starred, trashed) for multiple messages or all messages within multiple threads.
 */
export type flagCreateResponse200 = {
  data: FlagCreate200;
  status: 200;
};

export type flagCreateResponse400 = {
  data: FlagCreate400;
  status: 400;
};

export type flagCreateResponse403 = {
  data: FlagCreate403;
  status: 403;
};

export type flagCreateResponseComposite =
  | flagCreateResponse200
  | flagCreateResponse400
  | flagCreateResponse403;

export type flagCreateResponse = flagCreateResponseComposite & {
  headers: Headers;
};

export const getFlagCreateUrl = (params: FlagCreateParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/v1.0/flag/?${stringifiedParams}`
    : `/api/v1.0/flag/`;
};

export const flagCreate = async (
  params: FlagCreateParams,
  options?: RequestInit,
): Promise<flagCreateResponse> => {
  return fetchAPI<flagCreateResponse>(getFlagCreateUrl(params), {
    ...options,
    method: "POST",
  });
};

export const getFlagCreateMutationOptions = <
  TError = FlagCreate400 | FlagCreate403,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof flagCreate>>,
    TError,
    { params: FlagCreateParams },
    TContext
  >;
  request?: SecondParameter<typeof fetchAPI>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof flagCreate>>,
  TError,
  { params: FlagCreateParams },
  TContext
> => {
  const mutationKey = ["flagCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof flagCreate>>,
    { params: FlagCreateParams }
  > = (props) => {
    const { params } = props ?? {};

    return flagCreate(params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FlagCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof flagCreate>>
>;

export type FlagCreateMutationError = FlagCreate400 | FlagCreate403;

export const useFlagCreate = <
  TError = FlagCreate400 | FlagCreate403,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof flagCreate>>,
      TError,
      { params: FlagCreateParams },
      TContext
    >;
    request?: SecondParameter<typeof fetchAPI>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof flagCreate>>,
  TError,
  { params: FlagCreateParams },
  TContext
> => {
  const mutationOptions = getFlagCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
